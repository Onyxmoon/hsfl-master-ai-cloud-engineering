// Code generated by mockery v2.40.1. DO NOT EDIT.

package auth

import mock "github.com/stretchr/testify/mock"

// MockTokenGenerator is an autogenerated mock type for the TokenGenerator type
type MockTokenGenerator struct {
	mock.Mock
}

type MockTokenGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenGenerator) EXPECT() *MockTokenGenerator_Expecter {
	return &MockTokenGenerator_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: claims
func (_m *MockTokenGenerator) CreateToken(claims map[string]interface{}) (string, error) {
	ret := _m.Called(claims)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (string, error)); ok {
		return rf(claims)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenGenerator_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockTokenGenerator_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - claims map[string]interface{}
func (_e *MockTokenGenerator_Expecter) CreateToken(claims interface{}) *MockTokenGenerator_CreateToken_Call {
	return &MockTokenGenerator_CreateToken_Call{Call: _e.mock.On("CreateToken", claims)}
}

func (_c *MockTokenGenerator_CreateToken_Call) Run(run func(claims map[string]interface{})) *MockTokenGenerator_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockTokenGenerator_CreateToken_Call) Return(_a0 string, _a1 error) *MockTokenGenerator_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenGenerator_CreateToken_Call) RunAndReturn(run func(map[string]interface{}) (string, error)) *MockTokenGenerator_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *MockTokenGenerator) VerifyToken(tokenString string) (map[string]interface{}, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenGenerator_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockTokenGenerator_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockTokenGenerator_Expecter) VerifyToken(tokenString interface{}) *MockTokenGenerator_VerifyToken_Call {
	return &MockTokenGenerator_VerifyToken_Call{Call: _e.mock.On("VerifyToken", tokenString)}
}

func (_c *MockTokenGenerator_VerifyToken_Call) Run(run func(tokenString string)) *MockTokenGenerator_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenGenerator_VerifyToken_Call) Return(_a0 map[string]interface{}, _a1 error) *MockTokenGenerator_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenGenerator_VerifyToken_Call) RunAndReturn(run func(string) (map[string]interface{}, error)) *MockTokenGenerator_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenGenerator creates a new instance of MockTokenGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenGenerator {
	mock := &MockTokenGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
