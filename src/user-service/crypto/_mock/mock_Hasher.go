// Code generated by mockery v2.40.1. DO NOT EDIT.

package crypto

import mock "github.com/stretchr/testify/mock"

// MockHasher is an autogenerated mock type for the Hasher type
type MockHasher struct {
	mock.Mock
}

type MockHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHasher) EXPECT() *MockHasher_Expecter {
	return &MockHasher_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: _a0
func (_m *MockHasher) Hash(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockHasher_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockHasher_Expecter) Hash(_a0 interface{}) *MockHasher_Hash_Call {
	return &MockHasher_Hash_Call{Call: _e.mock.On("Hash", _a0)}
}

func (_c *MockHasher_Hash_Call) Run(run func(_a0 []byte)) *MockHasher_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockHasher_Hash_Call) Return(_a0 []byte, _a1 error) *MockHasher_Hash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHasher_Hash_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockHasher_Hash_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: _a0, _a1
func (_m *MockHasher) Validate(_a0 []byte, _a1 []byte) bool {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, []byte) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHasher_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockHasher_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 []byte
func (_e *MockHasher_Expecter) Validate(_a0 interface{}, _a1 interface{}) *MockHasher_Validate_Call {
	return &MockHasher_Validate_Call{Call: _e.mock.On("Validate", _a0, _a1)}
}

func (_c *MockHasher_Validate_Call) Run(run func(_a0 []byte, _a1 []byte)) *MockHasher_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].([]byte))
	})
	return _c
}

func (_c *MockHasher_Validate_Call) Return(_a0 bool) *MockHasher_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHasher_Validate_Call) RunAndReturn(run func([]byte, []byte) bool) *MockHasher_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHasher creates a new instance of MockHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHasher {
	mock := &MockHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
