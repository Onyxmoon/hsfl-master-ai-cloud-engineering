// Code generated by mockery v2.39.1. DO NOT EDIT.

package prices

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

type MockController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockController) EXPECT() *MockController_Expecter {
	return &MockController_Expecter{mock: &_m.Mock}
}

// DeletePrice provides a mock function with given fields: _a0, _a1
func (_m *MockController) DeletePrice(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_DeletePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePrice'
type MockController_DeletePrice_Call struct {
	*mock.Call
}

// DeletePrice is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) DeletePrice(_a0 interface{}, _a1 interface{}) *MockController_DeletePrice_Call {
	return &MockController_DeletePrice_Call{Call: _e.mock.On("DeletePrice", _a0, _a1)}
}

func (_c *MockController_DeletePrice_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_DeletePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_DeletePrice_Call) Return() *MockController_DeletePrice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_DeletePrice_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_DeletePrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrice provides a mock function with given fields: _a0, _a1
func (_m *MockController) GetPrice(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_GetPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrice'
type MockController_GetPrice_Call struct {
	*mock.Call
}

// GetPrice is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) GetPrice(_a0 interface{}, _a1 interface{}) *MockController_GetPrice_Call {
	return &MockController_GetPrice_Call{Call: _e.mock.On("GetPrice", _a0, _a1)}
}

func (_c *MockController_GetPrice_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_GetPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_GetPrice_Call) Return() *MockController_GetPrice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_GetPrice_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_GetPrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrices provides a mock function with given fields: _a0, _a1
func (_m *MockController) GetPrices(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_GetPrices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrices'
type MockController_GetPrices_Call struct {
	*mock.Call
}

// GetPrices is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) GetPrices(_a0 interface{}, _a1 interface{}) *MockController_GetPrices_Call {
	return &MockController_GetPrices_Call{Call: _e.mock.On("GetPrices", _a0, _a1)}
}

func (_c *MockController_GetPrices_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_GetPrices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_GetPrices_Call) Return() *MockController_GetPrices_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_GetPrices_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_GetPrices_Call {
	_c.Call.Return(run)
	return _c
}

// GetPricesByUser provides a mock function with given fields: _a0, _a1
func (_m *MockController) GetPricesByUser(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_GetPricesByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPricesByUser'
type MockController_GetPricesByUser_Call struct {
	*mock.Call
}

// GetPricesByUser is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) GetPricesByUser(_a0 interface{}, _a1 interface{}) *MockController_GetPricesByUser_Call {
	return &MockController_GetPricesByUser_Call{Call: _e.mock.On("GetPricesByUser", _a0, _a1)}
}

func (_c *MockController_GetPricesByUser_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_GetPricesByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_GetPricesByUser_Call) Return() *MockController_GetPricesByUser_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_GetPricesByUser_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_GetPricesByUser_Call {
	_c.Call.Return(run)
	return _c
}

// PostPrice provides a mock function with given fields: _a0, _a1
func (_m *MockController) PostPrice(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_PostPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostPrice'
type MockController_PostPrice_Call struct {
	*mock.Call
}

// PostPrice is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) PostPrice(_a0 interface{}, _a1 interface{}) *MockController_PostPrice_Call {
	return &MockController_PostPrice_Call{Call: _e.mock.On("PostPrice", _a0, _a1)}
}

func (_c *MockController_PostPrice_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_PostPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_PostPrice_Call) Return() *MockController_PostPrice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_PostPrice_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_PostPrice_Call {
	_c.Call.Return(run)
	return _c
}

// PutPrice provides a mock function with given fields: _a0, _a1
func (_m *MockController) PutPrice(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockController_PutPrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPrice'
type MockController_PutPrice_Call struct {
	*mock.Call
}

// PutPrice is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockController_Expecter) PutPrice(_a0 interface{}, _a1 interface{}) *MockController_PutPrice_Call {
	return &MockController_PutPrice_Call{Call: _e.mock.On("PutPrice", _a0, _a1)}
}

func (_c *MockController_PutPrice_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockController_PutPrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockController_PutPrice_Call) Return() *MockController_PutPrice_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockController_PutPrice_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockController_PutPrice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
